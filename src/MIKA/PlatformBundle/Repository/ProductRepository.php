<?php

namespace MIKA\PlatformBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function getProducts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.picture', 'p')
            ->addSelect('p')
            ->orderBy('a.id', 'DESC')
            ->getQuery()
        ;
        $query
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage)
        ;
        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }

    public function byCategorie($categories)
    {
        $qb = $this ->createQueryBuilder('p')
                    ->select('p')
                    ->join('p.categories', 'c', 'WITH', 'c.id = :categories')
                    ->setParameter(':categories', $categories);
        return $qb->getQuery()->getResult();
    }

    public function research($chaine)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.nameproduct like :chaine')
            ->orderBy('p.id')
            ->setParameter('chaine', $chaine);
        return $qb->getQuery()->getResult();
    }

    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.id IN (:array)')
            ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }
}